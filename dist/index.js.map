{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar zeros = require( '@stdlib/array-zeros' );\nvar dtype = require( '@stdlib/complex-dtype' );\nvar defaults = require( '@stdlib/array-defaults' );\n\n\n// VARIABLES //\n\nvar DEFAULT_REAL = defaults.get( 'dtypes.real_floating_point' );\nvar DEFAULT_CMPLX = defaults.get( 'dtypes.complex_floating_point' );\nvar DEFAULT_BOOL = defaults.get( 'dtypes.boolean' );\n\n\n// MAIN //\n\n/**\n* Returns a single-element array containing a provided scalar value.\n*\n* ## Notes\n*\n* -   If a `dtype` option is not provided and `value`\n*\n*     -   is a number, the default data type is the default real-valued floating-point data type.\n*     -   is a boolean, the default data type is the default boolean data type.\n*     -   is a complex number object of a known complex data type, the data type is the same as the provided value.\n*     -   is a complex number object of an unknown complex data type, the default data type is the default complex-valued floating-point data type.\n*     -   is any other value type, the default data type is `'generic'`.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - output array data type\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {Collection} output array\n*\n* @example\n* var x = scalar2array( 1.0 );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var x = scalar2array( 1.0, 'float32' );\n* // returns <Float32Array>[ 1.0 ]\n*/\nfunction scalar2array( value ) {\n\tvar flg;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar v;\n\n\tflg = isNumber( value );\n\tif ( arguments.length < 2 ) {\n\t\tif ( flg ) {\n\t\t\tdt = DEFAULT_REAL;\n\t\t} else if ( isBoolean( value ) ) {\n\t\t\tdt = DEFAULT_BOOL;\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = dtype( value );\n\t\t\tif ( dt === null ) {\n\t\t\t\tdt = DEFAULT_CMPLX;\n\t\t\t}\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t}\n\t} else {\n\t\tdt = arguments[ 1 ];\n\t}\n\tout = zeros( 1, dt ); // delegate dtype validation to `zeros`\n\tif ( flg && isComplexDataType( dt ) ) {\n\t\tv = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t} else {\n\t\tv = value;\n\t}\n\tif ( isAccessorArray( out ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( out, 0, v );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scalar2array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-element array containing a provided scalar value.\n*\n* @module @stdlib/array-from-scalar\n*\n* @example\n* var array2scalar = require( '@stdlib/array-from-scalar' );\n*\n* var x = scalar2array( 1.0 );\n* // returns <Float64Array>[ 1.0 ]\n*\n* @example\n* var array2scalar = require( '@stdlib/array-from-scalar' );\n*\n* var x = scalar2array( 1.0, 'float32' );\n* // returns <Float32Array>[ 1.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,+DAAgE,EAC7FC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAkB,QAAS,6CAA8C,EACzEC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAS,QAAS,2BAA4B,EAC9CC,EAAQ,QAAS,qBAAsB,EACvCC,EAAQ,QAAS,uBAAwB,EACzCC,EAAW,QAAS,wBAAyB,EAK7CC,EAAeD,EAAS,IAAK,4BAA6B,EAC1DE,EAAgBF,EAAS,IAAK,+BAAgC,EAC9DG,EAAeH,EAAS,IAAK,gBAAiB,EA+BlD,SAASI,EAAcC,EAAQ,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAAJ,EAAMd,EAAUa,CAAM,EACjB,UAAU,OAAS,EAClBC,EACJG,EAAKR,EACMP,EAAWW,CAAM,EAC5BI,EAAKN,EACMV,EAAeY,CAAM,GAChCI,EAAKV,EAAOM,CAAM,EACbI,IAAO,OACXA,EAAKP,IAGNO,EAAK,UAGNA,EAAK,UAAW,CAAE,EAEnBF,EAAMT,EAAO,EAAGW,CAAG,EACdH,GAAOf,EAAmBkB,CAAG,EACjCC,EAAI,CAAEL,EAAO,CAAI,EAEjBK,EAAIL,EAEAV,EAAiBY,CAAI,EACzBC,EAAMZ,EAAgBa,CAAG,EAEzBD,EAAMX,EAAQY,CAAG,EAElBD,EAAKD,EAAK,EAAGG,CAAE,EACRH,CACR,CAKAjB,EAAO,QAAUc,ICvEjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplexDataType", "isNumber", "isComplexLike", "isBoolean", "isAccessorArray", "accessorSetter", "setter", "zeros", "dtype", "defaults", "DEFAULT_REAL", "DEFAULT_CMPLX", "DEFAULT_BOOL", "scalar2array", "value", "flg", "out", "set", "dt", "v", "main"]
}
